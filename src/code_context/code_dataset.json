[
  {
    "name": "load_gitignore",
    "docstring": null,
    "code": "def load_gitignore():\n    with open('.gitignore', 'r') as f:\n        return pathspec.PathSpec.from_lines('gitignore', f.readlines())"
  },
  {
    "name": "is_ignored",
    "docstring": null,
    "code": "def is_ignored(path, gitignore_spec):\n    return gitignore_spec.match_file(path)"
  },
  {
    "name": "print_tree_and_contents",
    "docstring": null,
    "code": "def print_tree_and_contents(startpath, gitignore_spec, extensions=None):\n    if extensions is None:\n        extensions = []\n    output_lines = []\n    file_paths = []\n    for root, dirs, files in os.walk(startpath):\n        dirs[:] = [d for d in dirs if d != '.git' and (not is_ignored(os.path.join(root, d + '/'), gitignore_spec)) and (not is_ignored(os.path.join(root, d), gitignore_spec))]\n        files = [f for f in files if not is_ignored(os.path.join(root, f), gitignore_spec)]\n        depth = root.count(os.sep) - startpath.count(os.sep)\n        indent = '\u2502   ' * depth + '\u251c\u2500\u2500 '\n        output_lines.append(f'{indent}{os.path.basename(root)}/')\n        for file in files:\n            if any((file.endswith(ext) for ext in extensions)):\n                file_paths.append(os.path.join(root, file))\n        subindent = '\u2502   ' * (depth + 1) + '\u251c\u2500\u2500 '\n        for file in files:\n            if any((file.endswith(ext) for ext in extensions)):\n                output_lines.append(f'{subindent}{file}')\n    output_lines.append('\\n----- File Contents -----')\n    for file_path in file_paths:\n        output_lines.append(f'\\n----- {file_path} -----')\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                output_lines.append(f.read())\n        except Exception as e:\n            output_lines.append(f'Error reading {file_path}: {e}')\n    final_output = '\\n'.join(output_lines)\n    return final_output"
  }
]